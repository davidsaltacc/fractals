{

    "_": "[error]",

    "drop_preset": "Drop Preset Here",

    "no_gpu_supported": "Neither WebGPU nor WebGL are supported in your browser.",
    "gpu_lost": "Lost contact to your GPU. Please reload this page, and if neccessary, restart your browser. You also have the option to copy the link from the export section to avoid data loss. In case you experience black flashes on your screen after, please restart your PC.",

    "chunker_size_indivisible": "The final size needs to be divisible by the chunk size.",
    "chunking_failed": "Failed to render and merge chunks. This is probably due to the size being too big.",

    "preset_shader_not_loaded": "Can't load custom shader code contained in preset. (Your backend: {usingBackend}, preset code backend: {presetBackend})",

    "no_url_found_image": "No URL could be found in the uploaded image.",

    "enable_custom_fractal_shader": "Enable Custom Fractal Shader",
    "disable_custom_fractal_shader": "Disable Custom Fractal Shader",
    "update_custom_fractal_shader": "Update Custom Fractal Shader",
    "enable_custom_colorscheme_shader": "Enable Custom Colorscheme Shader",
    "disable_custom_colorscheme_shader": "Disable Custom Colorscheme Shader",
    "update_custom_colorscheme_shader": "Update Custom Colorscheme Shader",

    "version": "version {0}",
    "using_available_backend": "using available {0}",

    "descriptions": "Descriptions",
    "fractal_formula": "Fractal Formula",

    "fractal_selection": "Fractal Selection",
    "colorscheme_selection": "Colorscheme Selection",
    "colormethod_selection": "Color Method Selection",
    "modifier_selection": "Fractal Modifier",

    "import": "Import",
    "import_url": "Import from URL",
    "submit": "Submit",
    "import_png": "Import from exported PNG",
    "select_file": "Select File",

    "export": "Export",
    "export_png": "Export as PNG",

    "export_main": "Export Main",
    "export_juliaset": "Export Juliaset",

    "export_as_url": "Export as URL",

    "create_open_url": "Create & Open URL",
    "create_copy_url": "Create & Copy URL",

    "settings": "Settings",
    "reset_settings": "Reset Settings",
    "randomize_settings": "Randomize Settings",

    "sticky_canvases": "Sticky Canvases",
    "escape_radius": "Escape Radius",
    "iterations": "Iterations",
    "fractal_power": "Fractal Power",
    "juliaset_constant": "Juliaset Constant",
    "interpolate_normal_juliaset": "Interpolate between normal and juliaset",
    "canvas_size": "Canvas Size",
    "color_offset": "Color Offset",
    "colorfulness": "Colorfulness",
    "sample_count": "Sample Count",

    "force_backend": "Force Backend",

    "camera_smoothing": "Camera Smoothing",
    "camera_smoothing_value": "Camera Smoothing Intensity",

    "use_webgpu": "Use WebGPU",
    "use_webgl": "Use WebGL",

    "webgpu_description": "WebGPU uses more modern backends, providing a performance benefit, but isn't supported in every browser yet.",
    "webgl_description": "WebGL uses the more outdated OpenGL backend, which might be a bit worse performance-wise, but some browsers don't yet implement WebGPU.",

    "noise": "Noise",
    "noise_seed": "Seed",
    "noise_amplitude": "Amplitude",
    "noise_multiplier": "Multiplier",

    "image_chunker": "Image Chunker",

    "chunker_description": "Render the fractal in chunks, to be able to render fractals at huge scales and at high iterations and sample counts.",
    "webgl_export_hint": "Forcing the backend to be WebGL may help a with the render time and export speed, if you are experiencing issues exporting or just find it slow, force WebGL in the settings section.",

    "final_image_size": "Final Image Size",
    "chunk_size": "Chunk Size",

    "render_export_main": "Render and export main",
    "render_export_juliaset": "Render and export juliaset",

    "export_freeze_note": "Note: If your browser freezes instead of displaying a loading screen, this is most likely due to the used backend being WebGL. This is a known issue, just be patient, and if you want a progress indicator, press f12 to open the console with logs.",

    "override_parameters": "Override Parameters",
    "override_description": "Use this if you want to set some of the values (zoom, center, ...) to a certain value. Or just edit a preset URL directly, whatever you prefer.",

    "zoom_main": "Zoom (main)",
    "zoom_juliaset": "Zoom (juliaset)",
    "center_main": "Center (main)",
    "center_juliaset": "Center (juliaset)",

    "customize_code": "Customize Code",

    "custom_fractal": "Custom Fractal",
    "fractal_code": "Fractal Code",

    "help": "Help",

    "using_backend": "(Using Backend: {0})",

    "insert_currently_selected": "Insert Currently Selected",
    "compile_output": "Compile Output:",

    "fhelp_wgsl_note": "Note: the below examples are written in WGSL. Depending on the used backend, you might need to adjust the code.",
    "fhelp_custom_function": "Here you can enter a custom function for a fractal.",
    "fhelp_mandelbrot_example": "As an example, here is the mandelbrot set:",
    "fhelp_example_explanation": "In this example, {0} raises a complex number z to a power (usually 2) (type {1}), and adds c.",
    "fhelp_all_available_functions": "All available functions:",
    "fhelp_low_radius_note": "NOTE: When experimenting around, sometimes you should use some of these with a low radius. That produces better results sometimes.",

    "fhelp_func_complex": "Creates a complex number. Can also be written as {0}",
    "fhelp_func_c_multiplication": "Multiplies two complex numbers together.",
    "fhelp_func_c_division": "Divides two complex numbers.",
    "fhelp_func_c_pow": "Raises a complex number to a (real) power.",
    "fhelp_func_c_cpow": "Raises a complex number to a (complex) power.",
    "fhelp_func_c_sin": "Complex Sine",
    "fhelp_func_c_cos": "Complex Cosine",
    "fhelp_func_c_tan": "Complex Tangent",
    "fhelp_func_c_sinh": "Complex Hyperbolic Sine",
    "fhelp_func_c_cosh": "Complex Hyperbolic Cosine",
    "fhelp_func_c_tanh": "Complex Hyperbolic Tangent",
    "fhelp_func_c_asin": "Complex Arcsine",
    "fhelp_func_c_acos": "Complex Arccosine",
    "fhelp_func_c_atan": "Complex Arctangent",
    "fhelp_func_c_asinh": "Complex Hyperbolic Arcsine",
    "fhelp_func_c_acosh": "Complex Hyperbolic Arccosine",
    "fhelp_func_c_atanh": "Complex Hyperbolic Arctangent",
    "fhelp_func_c_log": "Complex Logarithm",
    "fhelp_func_c_exp": "Complex Exponential",
    "fhelp_func_c_sqrt": "Complex Square Root",
    "fhelp_func_c_abs": "Takes the absolute of both sides",

    "fhelp_access_functions": "You have access to all built-in WGSL/GLSL functions aswell.",
    "fhelp_all_available_constants": "All available constants:",

    "pi": "Pi",
    "e": "Euler's Number",
    "ln2": "(Natural) Logarithm of 2",
    "phi": "Golden Ratio",

    "custom_colorscheme": "Custom Colorscheme",
    "colorscheme_code": "Colorscheme Code",

    "cshelp_wgsl_note": "Note: the below examples are written in WGSL. Depending on the used backend, you might need to adjust the code.",
    "cshelp_custom_colorscheme_help": "For a custom colorscheme, you can either use a function involving maths, like this:",
    "cshelp_classic_cs_note": "This code uses a few sines to create the \"classic\" colorscheme.",
    "cshelp_interpolation_note": "Or, you could just use interpolation. An example is here:",
    "cshelp_confusing_note": "While this might look a little confusing at first, you can also just try modifying the colors at the top, changing (1., 0., 1.) to whatever color (in RGB) you like. \nThis example creates the \"rainbow\" colorscheme.",

    "load_plugin": "Load Plugin",
    "from_url": "From URL",
    "featured_plugins": "Featured (mine :P)",
    
    "mandelbrot_variants": "Mandelbrot Variants",

    "animation": "Animation",
    "edit_animation": "Edit Animation",
    "add_track": "Edit Animation",

    "anim_center_x": "Center X",
    "anim_center_y": "Center Y",
    "anim_zoom": "Zoom",
    "anim_constant_x": "Constant X",
    "anim_constant_y": "Constant Y",
    "anim_radius": "Radius",
    "anim_power": "Power",
    "anim_max_iterations": "Max Iterations",
    "anim_sample_count": "Sample Count",
    "anim_color_offset": "Color Offset",
    "anim_colorfulness": "Colorfulness",
    "anim_juliaset_interpolation": "Jset. Interp.",
    "anim_noise_seed": "Noise Seed",
    "anim_noise_amp": "Noise Amp",
    "anim_noise_multiplier": "Noise Multiplier",

    "vcodec_not_supported": "{0} is not supported in your browser.",

    "select_parameter": "Select Parameter",

    "animation_length": "Animation Length (seconds):",

    "increase_zoom": "Increase Zoom",
    "decrease_zoom": "Decrease Zoom",

    "edit_selected_keyframe": "Edit Selected Keyframe",

    "keyframe_time": "Time:",
    "keyframe_value": "Value:",
    "keyframe_easing": "Easing (from previous):",
    "keyframe_easing_strength": "Easing Strength (1-âˆž):",

    "remove_keyframe": "Remove Keyframe",

    "linear": "Linear",
    "ease_in": "Ease In",
    "ease_out": "Ease Out",
    "ease_in_out": "Ease In Out",

    "run_and_export": "Run & Export",

    "anim_webgl_note": "Forcing the backend to be WebGL may help a with the render time and export speed, if you are experiencing issues exporting or just find it slow, force WebGL in the settings section.\nWhy? There is no way in WebGPU to render to a texture or buffer instead of a canvas efficiently at most resolutions, because the size must be a multiple of 256. Exporting at resolutions other than multiples of 64 (64 * 4 channels = 256) will require adding some extra empty space, leading to performance impacts. (Maybe there is a better solution, but I am not all-knowing either, so instead just use WebGL)",

    "run_anim_main": "Run animation for main",
    "run_anim_juliaset": "Run animation for juliaset",

    "stop_anim": "Stop Animation",

    "export_anim_main": "Export animation for main",
    "export_anim_juliaset": "Export animation for juliaset",

    "export_options": "Export Options",

    "video_container": "Video Container",
    "video_codec": "Video Codec",
    "video_framerate": "Video Framerate",

    "anim_avc_note": "Q: Why not MP4 & H.264 and others?\nA: Most browsers can't encode into AVC/H.264, but you can use ffmpeg or other tools to convert the output file manually.",

    "information": "Information",

    "reporting_issues": "Reporting Issues:",
    "reporting_note": "This project is still very early in development. This means, new features will be added in the future. Bugs might occur and things might break. If you find anything, please open a issue on {0}.",

    "other_versions": "Other Versions",
    "what_are_fractals": "What are fractals?",

    "special_thanks": "Special Thanks",

    "changelog": "Changelog",

    "support_me": "Support my work!",

    "desc_title_fractal": "{0} Fractal",
    "desc_title_colorscheme": "{0} Colorscheme",
    "desc_title_colormethod": "{0} Color Method",
    "desc_title_modifier": "{0} Modifier",

    "mandelbrot": "Mandelbrot",
    "burning_ship": "Burning Ship",
    "celtic": "Celtic",
    "buffalo": "Buffalo",
    "tricorn": "Tricorn",
    "duck": "Duck",
    "b_fractal": "B fractal",
    "sine": "Sine",
    "popcorn": "Popcorn",
    "thorn": "Thorn",
    "henon": "Henon",
    "duffing": "Duffing", 
    "chirikov": "Chirikov",
    "ikeda": "Ikeda",
    "feather": "Feather",
    "heart": "Heart",
    "sunglasses": "Sunglasses",
    "triangle": "Triangle",
    "shark_fin": "Shark Fin",
    "tippets": "Tippets",
    "zubieta": "Zubieta",
    "hyperbolic_sine": "Hyperbolic Sine",
    "unnamed_1": "Unnamed 1",
    "unnamed_2": "Unnamed 2",
    "unnamed_3": "Unnamed 3",
    "fish": "Fish",
    "wavy": "Wavy",
    "collatz": "Collatz",
    "unnamed_4": "Unnamed 4",
    "septagon": "Septagon",
    "unnamed_5": "Unnamed 5",
    "unnamed_6": "Unnamed 6",
    "cactus": "Cactus",
    "unnamed_7": "Unnamed 7",
    "power_circle": "Power Circle",
    "bitten_mandelbrot": "Bitten Mandelbrot",
    "unnamed_8": "Unnamed 8",
    "unnamed_9": "Unnamed 9",
    "smallbrot": "Smallbrot",
    "magnet": "Magnet",
    "tree": "Tree",
    "unnamed_10": "Unnamed 10",
    "not_mandelbrot": "Not Mandelbrot",
    "sierpinsky": "Sierpinsky",
    "barnsley": "Barnsley",
    "structure_in_emptiness": "Structure in Emptiness",
    "unnamed_11": "Unnamed 11",
    "unnamed_12": "Unnamed 12",
    "what": "What",
    "unnamed_13": "Unnamed 13",

    "mandelbrot_desc": "The standard Mandelbrot set.",
    "burning_ship_desc": "A variation of the Mandelbrot set. Got its name because of the tiny burning ship on the left.",
    "celtic_desc": "Another variation of the Mandelbrot set. Kind of looks like a fish.",
    "buffalo_desc": "Yet another Mandelbrot variation. The reason for its name should be obvious.",
    "tricorn_desc": "Another Mandelbrot variation. Also called the Mandelbar sometimes.",
    "duck_desc": "Another Mandlebrot variation. Looks like a duck. Or a goose if you prefer. Apparently also called the perpendicular burning ship. The function only looks as complicated so the power can easily be changed in code.",
    "b_fractal_desc": "Kind of looks like- well, ..., whatever.",
    "sine_desc": "Infinitely repeating to the left and right. Interesting, isn't it?",
    "popcorn_desc": "I have no idea who named this one the \"Popcorn\" fractal. Maybe the creator's name was Popcorn? I should probably do more research... Anyway, It generates really cool patterns.",
    "thorn_desc": "Not the usual kind of escape-time fractal, yet still very interesting.",
    "henon_desc": "Henon map.",
    "duffing_desc": "Duffing map.",
    "chirikov_desc": "Chirikov map.",
    "ikeda_desc": "Ikeda map.",
    "feather_desc": "Really cool looking fractal. Looks like a feather.",
    "heart_desc": "<3",
    "sunglasses_desc": "just sunglasses, nothing else",
    "triangle_desc": "Literally just a triangle. Did you know that aÂ² + bÂ² = cÂ² for every right triangle?",
    "shark_fin_desc": "Could also be a dolphin. Actually, not really.",
    "tippets_desc": "With all respect, I think, John Tippets messed up the code for a mandelbrot set, and got this.",
    "zubieta_desc": "Looks really interesting. No idea what else to say about this.",
    "hyperbolic_sine_desc": "Kind of like the sine, this one is repeating infinitely vertically. Just looks a little better.",
    "unnamed_1_desc": "I found no good name for this. If you can think of anything, tell me.",
    "unnamed_2_desc": "I found no name again. Creates really cool patterns. With a power of one and interior coloring, seems to create a Newton-like fractal.",
    "unnamed_3_desc": "No name again, but it looks really cool. Also, it is very big.",
    "fish_desc": "Doesn't even look like anything close to a fish.",
    "wavy_desc": "A lot of waves are involved in this.",
    "collatz_desc": "Complex collatz conjecture, apparently.",
    "unnamed_4_desc": "Another unnamed fractal. Has a lot of edges.",
    "septagon_desc": "It looks a little like an hourglass, and its juliasets are septagons.",
    "unnamed_5_desc": "No idea, this one seems like a warped and distorted version of the mandelbrot set.",
    "unnamed_6_desc": "The juliasets have interesting symmetries. Okay, I'm just running out of ideas what to put here. (I say running out of - I never had any to begin with.)",
    "cactus_desc": "Cactus fractal. (I still don't know what to put here.)",
    "unnamed_7_desc": "Very big (?).",
    "power_circle_desc": "I called it that because it looks like a circle (obviously) and appears from raising z to the power of c.",
    "bitten_mandelbrot_desc": "I took a byte. Sorry.",
    "unnamed_8_desc": "Reeeeaaaally big. (I'm running out of creativity. I really don't know what to name this one. Just like all the others.)",
    "unnamed_9_desc": "Again, I do not know what to name this one.",
    "smallbrot_desc": "Smaller mandelbrot-like looking fractal.",
    "magnet_desc": "Magnet fractal. Maybe turn on interior coloring?",
    "tree_desc": "Square root makes tree, apparently. Changes its appearance a lot with different powers.",
    "unnamed_10_desc": "I reeeaally need to find some names for all of these.",
    "not_mandelbrot_desc": "Looks like the mandelbrot set at first, but really isn't.",
    "sierpinsky_desc": "IFS Fractal, except its not IFS its escape-time. Has no juliaset, so both canvases are filled with the same.",
    "barnsley_desc": "Fern.",
    "structure_in_emptiness_desc": "Seems a bit empty at first, but zooming into the small area on the left reveals interesting structures. Also at higher powers, though then it is barely noticable due to floating point precision. Sorry.",
    "unnamed_11_desc": "It's juliasets (around Im(c)=0) somewhat remind of the Tippets Fractal's.",
    "unnamed_12_desc": "<description here, I can't think of anything>",
    "what_desc": "What the F*?<br>- My reaction seeing this for the first time. <br>A mandelbrot with two ends, like raised to power +1 but like, not?",
    "unnamed_13_desc": "Turn up the colorfulness to see interesting details.",

    "terraced": "Terraced",
    "smooth": "Smooth",
    "interior": "Interior",
    "rings": "Rings",
    "stripes": "Stripes",
    "accurate": "Accurate",
    "smooth_stripes": "Smooth Stripes",
    "edgy": "Edgy",
    "squared": "Squared",
    "spiky": "Spiky",
    "stripy_rings": "Stripy Rings",
    "interior_2": "Interior 2",
    "interior_stripes": "Interior Stripes",
    "pickover_stalk": "Pickover Stalk",
    "pickover_stalk_1": "Pickover Stalk Variation 1",
    "pickover_stalk_2": "Pickover Stalk Variation 2",

    "terraced_desc": "\"Mathematically accurate\" coloring method. Not smoothed, colored based on how long it takes for z to escape to infinity.",
    "smooth_desc": "Smooth coloring.",
    "interior_desc": "Interior coloring.",
    "rings_desc": "Rings around the fractal.",
    "stripes_desc": "Really cool stripes pattern.",
    "accurate_desc": "Pixels are either black (part of the set) or not (not a part of the set).",
    "smooth_stripes_desc": "Like stripes, just a lot smoother.",
    "edgy_desc": "Another stripes variant, has a lot of edges.",
    "squared_desc": "Another stripes variant.",
    "spiky_desc": "Something spiky. Only looks good on some fractals.",
    "stripy_rings_desc": "Rings, but with stripes too.",
    "interior_2_desc": "Another interior coloring method, a little different that the first one.",
    "interior_stripes_desc": "Stripes, but on the interior. A little messy, most of the time it only looks really good on the juliasets.",
    "pickover_stalk_desc": "Another attempt at orbit traps. Looks quite nice, actually. Even though I don't understand half of it. Has a lot of thin lines, so maybe put in a higher sample count.",
    "pickover_stalk_1_desc": "Small variation of the pickover stalk coloring method.",
    "pickover_stalk_2_desc": "Another variation.",

    "classic": "Classic",
    "ultra_fractal": "Ultra Fractal",
    "red_blue": "Red and Blue",
    "sand": "Sand",
    "rainbow": "Rainbow",
    "davids": "David's",
    "lava_waves": "Lava Waves",
    "morning_glory": "Morning Glory",
    "chocolate": "Chocolate",
    "contrasted_classic": "Contrasted Classic",
    "black_white": "Black and White",
    "twilight": "Twilight",
    "red": "Red",
    "green": "Green",
    "blue": "Blue",
    "cold": "Cold",
    "winter": "Winter",
    "glow": "Glow",
    "purple": "Purple",
    "brown": "Brown",

    "classic_desc": "The \"Classic\" colormap. Easily calculated with a bit of math magic.",
    "ultra_fractal_desc": "The default colormap in ultra fractal.",
    "red_blue_desc": "Red and blue. As the name says.",
    "sand_desc": "Sand colormap. The colors remind of sand and water related things.",
    "rainbow_desc": "Basically a full HSV colormap. Just rainbows.",
    "davids_desc": "My own colorscheme. I like it, although it only looks good on some fractals.",
    "lava_waves_desc": "Some colorscheme I found on the internet. Decided to put it in because I was running out of good colormaps. Now I have quite a few, but I didn't want to delete old stuff.",
    "morning_glory_desc": "Another colorscheme I found on the internet.",
    "chocolate_desc": "A colorscheme I just came up with. Has this chocolate-y color to it. Changes into a rainbow and back when zooming in. Unintended.",
    "contrasted_classic_desc": "The classic colorscheme, but more.. ugly.",
    "black_white_desc": "Black and white colorscheme. Looks cool.",
    "twilight_desc": "Twilight colormap from matplotlib.",
    "red_desc": "Red.",
    "green_desc": "Green.",
    "blue_desc": "Blue.",
    "cold_desc": "Only cold colors.",
    "winter_desc": "Snowy and icy. I like it",
    "glow_desc": "Doesn't sound like the best of names for this. I'm just reeeeaaaally uncreative.",
    "purple_desc": "Purple and yellow. Doesn't look good in some cases, but in some, it looks really good.",
    "brown_desc": "A bit like the chocolate colormap, but different. Also found this one on the internet.",

    "none": "None",
    "sine_modifier": "Sine",
    "hyperbolic_sine_modifier": "Hyperbolic Sine",
    "cosine": "Cosine",
    "hyperbolic_cosine": "Hyperbolic Cosine", 
    "tangent": "Tangent",
    "hyperbolic_tangent": "Hyperbolic Tangent",
    "logarithm": "Logarithm",
    "square_root": "Square Root",
    "absolute": "Absolute",
    "exponential": "Exponential",
    "arctangent": "Arctangent",
    "arcsine": "Arcsine",
    "arccosine": "Arccosine",
    "hyperbolic_arcsine": "Hyperbolic Arcsine",
    "hyperbolic_arccosine": "Hyperbolic Arccosine",
    "hyperbolic_arctangent": "Hyperbolic Arctangent",
    "inversed": "Inversed",
    "scatter": "Scatter",

    "none_desc": "You have no fractal modifier selected. What are you expecting to see here?",
    "sine_modifier_desc": "Complex sine.",
    "hyperbolic_sine_modifier_desc": "Complex hyperbolic sine.",
    "cosine_desc": "Complex cosine.",
    "hyperbolic_cosine_desc": "Complex hyperbolic cosine.",
    "tangent_desc": "Complex tangent.",
    "hyperbolic_tangent_desc": "Complex hyperbolic tangent. I would enable interior coloring.",
    "logarithm_desc": "Complex logarithm. I would enable interior coloring.",
    "square_root_desc": "Complex square root. Mandelbrot looks boring with this one.",
    "absolute_desc": "Takes the absolute of both sides. The true absolute of a complex number would return a single non-complex value.",
    "exponential_desc": "Complex exponential function.",
    "arctangent_desc": "Complex arctangent. Enable interior coloring.",
    "arcsine_desc": "Complex arcsine. Enable interior coloring. With higher powers, this can create interesting effects.",
    "arccosine_desc": "Complex arccosine. Enable interior coloring. With higher powers, this can create interesting effects.",
    "hyperbolic_arcsine_desc": "Complex hyperbolic arcsine. Enable interior coloring. With higher powers, this can create interesting effects.",
    "hyperbolic_arccosine_desc": "Complex hyperbolic arccosine. Enable interior coloring. With higher powers, this can create interesting effects.",
    "hyperbolic_arctangent_desc": "Complex hyperbolic arctangent. Enable interior coloring.",
    "inversed_desc": "Inversed. Pretty much just 1/z.",
    "scatter_desc": "Make sure to use a high sample count, among with a high colorfulness value, then it creates an almost buddhabrot-like image."

}